#!/bin/bash
# ==============================================================================
#
# Ashno: The Professional Termux Toolkit Installer
#
# Version:      14.0 (Flawless UI & Definitive)
# Author:       Generated by an AI expert
# Description:  The definitive, state-of-the-art installer framework with
#               a meticulously corrected, flawless, and professional UI.
#
# ==============================================================================

# --- Globals and Configuration ---
readonly SCRIPT_NAME="Ashno"
readonly SCRIPT_PATH=$(readlink -f "$0")
readonly SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
readonly PROFILES_DIR="$SCRIPT_DIR/profiles"

# --- ANSI Color Codes for a Professional Palette ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m';
BLUE='\033[0;34m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m';
NC='\033[0m'; BOLD='\033[1m';

# --- State-Tracking Variables ---
SUCCESS_LIST=(); FAILURE_LIST=(); SKIPPED_LIST=();
SELECTED_PROFILE=""

# --- Graceful Exit Handler ---
cleanup() { echo -e "\n\n${YELLOW}SIGINT received. Shutting down gracefully.${NC}"; tput cnorm; exit 130; }
trap cleanup INT TERM

# ==============================================================================
# SECTION: UI & CORE HELPER FUNCTIONS (State of the Art)
# ==============================================================================
print_banner() {
    local title=" $1 "; local len=${#title}; local border; border=$(printf "%*s" "$len" | tr ' ' '=')
    echo -e "\n${BLUE}+--${border}--+${NC}"; echo -e "${BLUE}|  ${BOLD}${YELLOW}${title} ${BLUE} |${NC}"; echo -e "${BLUE}+--${border}--+${NC}"
}
print_prompt() { echo -en "\n${CYAN}>${NC}${BOLD} Select an option:${NC} "; }
print_help_menu() {
    clear; print_banner "Ashno Help Manual"
    echo -e "A professional, self-updating tool that installs packages from profiles."
    echo; echo -e "${BOLD}${YELLOW}USAGE:${NC}"; echo -e "  ashno ${PURPLE}[COMMANDS]${NC}"; echo -e "    Running without commands launches the interactive menu."
    echo; echo -e "${BOLD}${YELLOW}INSTALLATION COMMANDS:${NC}"
    printf "  ${PURPLE}%-20s${NC} %s\n" "--profile <NAME>" "Required. Selects a profile by its directory name."
    printf "  ${PURPLE}%-20s${NC} %s\n" "--all | --pkg | ..." "Required. The action to perform (install all, pkg, etc.)."
    echo; echo -e "${BOLD}${YELLOW}UTILITY COMMANDS:${NC}"
    printf "  ${PURPLE}%-20s${NC} %s\n" "-u, --update" "Checks for and applies updates to Ashno itself."
    printf "  ${PURPLE}%-20s${NC} %s\n" "-h, --help" "Display this help manual and exit."
    echo; echo -e "${BOLD}${YELLOW}EXAMPLE:${NC}"; echo -e "  ashno --profile 2_extended --all"; echo
}
build_package_list() {
    local pkg_type="$1"; local sel_prof_name="$2"; local f_list=""; local f_read=();
    if [[ "$sel_prof_name" =~ ^([0-9]+)_.+ ]]; then local p_lvl="${BASH_REMATCH[1]}"; for i in $(seq 1 "$p_lvl"); do local f_dir; f_dir=$(find "$PROFILES_DIR" -maxdepth 1 -type d -name "${i}_*" | head -n 1); if [ -n "$f_dir" ]; then local l_file="${f_dir}/${pkg_type}.list"; if [ -f "$l_file" ]; then f_read+=("$l_file"); fi; fi; done
    else local l_file="${PROFILES_DIR}/${sel_prof_name}/${pkg_type}.list"; if [ -f "$l_file" ]; then f_read+=("$l_file"); fi; fi
    if [ ${#f_read[@]} -gt 0 ]; then f_list=$(cat "${f_read[@]}" | grep -vE '^\s*#|^\s*$' | sort -u); fi; echo "$f_list"
}

# ==============================================================================
# SECTION: SELF-UPDATE MECHANISM (State of the Art)
# ==============================================================================
handle_updates() {
    local mode="$1"; cd "$SCRIPT_DIR" || { echo -e "${RED}Error: Cannot change to script directory.${NC}"; return 1; }
    if [ "$mode" == "manual" ]; then print_banner "Ashno Updater"; fi; echo -en "  Checking for updates..."
    git fetch origin &>/dev/null; if [ $? -ne 0 ]; then printf "\r\033[K"; echo -e "  ${RED}✖${NC} Could not fetch updates."; return 1; fi
    local local_rev; local_rev=$(git rev-parse HEAD); local remote_rev; remote_rev=$(git rev-parse '@{u}')
    if [ "$local_rev" == "$remote_rev" ]; then printf "\r\033[K"; if [ "$mode" == "manual" ]; then echo -e "  ${GREEN}✔${NC} Ashno is already up to date."; fi; return 0; fi
    printf "\r\033[K"; echo -e "  ${YELLOW}●${NC} An update is available for Ashno!"
    if ! git diff-index --quiet HEAD --; then echo -e "  ${RED}✖${NC} Update aborted. You have local changes in: ${BOLD}$SCRIPT_DIR${NC}"; echo -e "  Please commit or stash your changes before updating."; [ "$mode" == "auto" ] && exit 1 || return 1; fi
    local prompt_msg="Do you want to apply the update now? [Y/n]: "; if [ "$mode" == "auto" ]; then prompt_msg="An update is required to continue. Apply it now? [Y/n]: "; fi
    read -p "  ${prompt_msg}" choice
    case "$choice" in
        [nN][oO]) echo -e "  Update cancelled."; [ "$mode" == "auto" ] && { echo "  Aborting installation."; exit 1; } || return 1 ;;
        *) echo -en "  Applying update..."; git pull origin main &>/dev/null || { printf "\r\033[K"; echo -e "  ${RED}✖${NC} Update failed."; return 1; }
           printf "\r\033[K"; echo -e "  ${GREEN}✔${NC} Ashno has been updated successfully!";
           if [ "$mode" == "manual" ]; then echo -e "  Please re-run your previous command."; else echo -e "  Resuming installation..."; sleep 1; fi; return 0 ;;
    esac
}

# ==============================================================================
# SECTION: INSTALLATION ENGINE
# ==============================================================================
spinner() { tput civis; local pid=$1; local str='⣾⣽⣻⢿⡿⣟⣯⣷'; while ps -p "$pid" > /dev/null; do printf "${PURPLE}%s${NC}" "${str:0:1}"; str=${str:1}${str:0:1}; sleep 0.08; printf "\b"; done; printf " "; tput cnorm; }
pre_flight_checks() { print_banner "Performing System Checks"; if ! ping -c 1 8.8.8.8 &>/dev/null; then echo -e "${RED}Error: No internet.${NC}"; exit 1; fi; echo -e " ${GREEN}✔${NC} Internet Connection: OK"; if (( $(df -k . | awk 'NR==2{print $4}') < 1572864 )); then echo -e "${RED}Error: Insufficient storage.${NC}"; exit 1; fi; echo -e " ${GREEN}✔${NC} Available Storage:   OK"; }
update_termux() { print_banner "Updating Termux Base System"; (pkg update -y && pkg upgrade -y) &>/dev/null & local pid=$!; echo -en "  Updating sources and packages... "; spinner $pid; wait $pid; printf "\r\033[K"; echo -e " ${GREEN}✔${NC} Base system update complete.";}
install_packages() {
    local pkg_type="$1"; local type_name="$2"; print_banner "Installing ${type_name} Packages"; local CMD_CHECK; local INSTALL_CMD;
    case "$pkg_type" in
        pkg) CMD_CHECK="dpkg -s"; INSTALL_CMD="pkg install -y" ;;
        npm) if ! command -v npm &>/dev/null; then echo -e "${YELLOW}Notification:${NC} NPM not found. Skipping."; FAILURE_LIST+=("Node.js/NPM"); return; fi; CMD_CHECK="npm list -g --depth=0"; INSTALL_CMD="npm install -g" ;;
        pip) if ! command -v pip &>/dev/null; then echo -e "${YELLOW}Notification:${NC} PIP not found. Skipping."; FAILURE_LIST+=("Python/PIP"); return; fi; (pip install --upgrade pip setuptools wheel) &>/dev/null & spinner $!; wait $!; CMD_CHECK="pip show"; INSTALL_CMD="pip install --no-cache-dir" ;;
    esac
    local package_list; package_list=$(build_package_list "$pkg_type" "$SELECTED_PROFILE"); if [ -z "$package_list" ]; then echo "No packages found in this profile for type: ${type_name}."; return; fi
    for pkg_name in $package_list; do
        if $CMD_CHECK "$pkg_name" &>/dev/null; then SKIPPED_LIST+=("$pkg_name"); echo -e " ${YELLOW}[SKIP]${NC} ${pkg_name} (already installed)";
        else echo -en "  Installing ${BOLD}${pkg_name}${NC}... "; ($INSTALL_CMD "$pkg_name") &>/dev/null & local pid=$!; spinner $pid; wait $pid; local exit_code=$?; printf "\r\033[K";
            if [ "$exit_code" -eq 0 ]; then echo -e " ${GREEN}[ OK ]${NC}  ${pkg_name}"; SUCCESS_LIST+=("$pkg_name"); else echo -e " ${RED}[FAIL]${NC}  ${pkg_name}"; FAILURE_LIST+=("$pkg_name"); fi; fi
    done
}

# ==============================================================================
# SECTION: MENUS & REPORTING
# ==============================================================================
print_summary_report() {
    print_banner "Installation Summary Report"; echo -e " Summary of all installation operations."; echo
    echo -e " ${GREEN}✔ Successful: ${#SUCCESS_LIST[@]}${NC}"; if [ ${#SUCCESS_LIST[@]} -gt 0 ]; then printf -- "   - %s\n" "${SUCCESS_LIST[@]}"; fi
    echo -e " ${RED}✖ Failed:     ${#FAILURE_LIST[@]}${NC}"; if [ ${#FAILURE_LIST[@]} -gt 0 ]; then printf -- "   - %s\n" "${FAILURE_LIST[@]}"; fi
    echo -e " ${YELLOW}● Skipped:    ${#SKIPPED_LIST[@]}${NC}"; if [ ${#SKIPPED_LIST[@]} -gt 0 ]; then printf -- "   - %s\n" "${SKIPPED_LIST[@]}"; fi
    echo -e "\n${GREEN}${BOLD}All tasks complete.${NC}"
}
main_menu() {
    clear; print_banner "Main Menu"; echo -e "  ${BOLD}Active Profile:${NC} ${YELLOW}${SELECTED_PROFILE}${NC}\n"
    echo -e "  ${CYAN}1)${NC}  ${BOLD}Full Installation${NC} (PKG, NPM, PIP)"; echo -e "  ${CYAN}2)${NC}  Install ${BOLD}PKG${NC} Packages"; echo -e "  ${CYAN}3)${NC}  Install ${BOLD}NPM${NC} Packages"; echo -e "  ${CYAN}4)${NC}  Install ${BOLD}PIP${NC} Packages"
    echo; echo -e "  ${CYAN}5)${NC}  Change Profile"; echo -e "  ${CYAN}6)${NC}  Exit Ashno"
}

# --- THE DEFINITIVE FIX IS HERE: Robust, readable, and flawless menu logic ---
profile_selection_menu() {
    clear; print_banner "Choose Installation Profile";
    local profiles=(); while IFS= read -r line; do profiles+=("$line"); done < <(find "$PROFILES_DIR" -maxdepth 1 -mindepth 1 -type d | sort);
    
    if [ ${#profiles[@]} -eq 0 ]; then echo -e "${RED}Error: No profiles found in '${PROFILES_DIR}/'.${NC}"; exit 1; fi
    
    echo -e "Welcome to Ashno. Please select a profile to begin.\n"
    
    local count=1
    for profile_path in "${profiles[@]}"; do
        local profile_name; profile_name=$(basename "$profile_path")
        local option_line
        
        # Build the main option line first, with the correct count
        case "$profile_name" in
            "1_essentials") option_line=$(printf "  ${CYAN}%2d)${NC} ${BOLD}Essentials${NC}" "$count") ;;
            "2_extended")   option_line=$(printf "  ${CYAN}%2d)${NC} ${BOLD}Extended${NC} ${GREEN}(Recommended)${NC}" "$count") ;;
            "3_complete")   option_line=$(printf "  ${CYAN}%2d)${NC} ${BOLD}Complete${NC}" "$count") ;;
            *)              option_line=$(printf "  ${CYAN}%2d)${NC} ${BOLD}%s${NC}" "$count" "$profile_name") ;;
        esac
        echo -e "$option_line"
        
        # Now print the corresponding description on a new line for perfect alignment
        case "$profile_name" in
            "1_essentials") echo -e "     A lightweight, minimal setup." ;;
            "2_extended")   echo -e "     For developers and advanced users." ;;
            "3_complete")   echo -e "     A comprehensive toolkit for power users." ;;
        esac
        echo # Add a blank line for spacing between entries
        
        count=$((count + 1))
    done
    printf "  ${CYAN}%2d)${NC} ${BOLD}%s${NC}\n" "$count" "Exit Ashno"
    
    local choice; print_prompt; read choice
    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#profiles[@]} ]; then SELECTED_PROFILE=$(basename "${profiles[$choice-1]}");
    elif [ "$choice" -eq $count ]; then echo -e "\nExiting Ashno."; exit 0; else echo -e "\n${RED}Invalid selection.${NC}"; sleep 1; profile_selection_menu; fi
}

# ==============================================================================
# SECTION: SCRIPT EXECUTION ENTRYPOINT
# ==============================================================================
if [ ! -d "$PROFILES_DIR" ]; then echo -e "${RED}Fatal Error: '${PROFILES_DIR}/' could not be found.${NC}"; exit 1; fi

if [ $# -gt 0 ]; then
    profile_arg=""; action_arg=""
    while [ $# -gt 0 ]; do
        case "$1" in -h|--help) print_help_menu; exit 0;; -u|--update) handle_updates "manual"; exit 0;; --profile) profile_arg="$2"; shift 2;; --all|--pkg|--npm|--pip) action_arg="$1"; shift 1;; *) echo -e "${RED}Invalid argument: $1${NC}\nUse 'ashno --help'."; exit 1;; esac
    done
    if [ -z "$profile_arg" ] || [ -z "$action_arg" ] || [ ! -d "${PROFILES_DIR}/${profile_arg}" ]; then echo -e "${RED}Error: Valid --profile <NAME> and an action required.${NC}"; echo -e "Profile '${profile_arg}' not found."; print_help_menu; exit 1; fi
    
    handle_updates "auto"; SELECTED_PROFILE=$profile_arg; pre_flight_checks
    [ "$action_arg" == "--all" ] || [ "$action_arg" == "--pkg" ] && update_termux
    [ "$action_arg" == "--all" ] || [ "$action_arg" == "--pkg" ] && install_packages "pkg" "PKG"
    [ "$action_arg" == "--all" ] || [ "$action_arg" == "--npm" ] && install_packages "npm" "NPM"
    [ "$action_arg" == "--all" ] || [ "$action_arg" == "--pip" ] && install_packages "pip" "PIP"
    print_summary_report; exit 0
fi

clear; pre_flight_checks; handle_updates "auto"; profile_selection_menu
while true; do
    main_menu; print_prompt; read main_choice
    case $main_choice in
        1) update_termux; install_packages "pkg" "PKG"; install_packages "npm" "NPM"; install_packages "pip" "PIP";;
        2) update_termux; install_packages "pkg" "PKG";;
        3) install_packages "npm" "NPM";;
        4) install_packages "pip" "PIP";;
        5) profile_selection_menu; continue;;
        6) echo -e "\nExiting Ashno."; exit 0;;
        *) echo -e "\n${RED}Invalid choice.${NC}"; sleep 1; continue;;
    esac
    print_summary_report; echo; read -n 1 -s -r -p "Press any key to return to the main menu..."
    SUCCESS_LIST=(); FAILURE_LIST=(); SKIPPED_LIST=();
done
