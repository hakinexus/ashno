#!/bin/bash
# ==============================================================================
#
# Ashno: The Professional Termux Toolkit Installer
#
# Version:      2.0 (Flawless Edition)
# Author:       Generated by an AI expert
# Description:  A robust, intelligent, and user-centric script for setting
#               up a professional development environment in Termux.
#               Features pre-flight checks, idempotency, non-interactive mode,
#               progress indicators, and a comprehensive final report.
#
# ==============================================================================

# --- Globals and Configuration ---
readonly SCRIPT_NAME="Ashno"
readonly LOG_FILE="ashno_installer.log"

# --- ANSI Color Codes for Professional Output ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# --- State-Tracking Arrays ---
SUCCESS_LIST=()
FAILURE_LIST=()
SKIPPED_LIST=()

# --- Graceful Exit Handler ---
# This function is called when the script is interrupted (Ctrl+C).
cleanup() {
    echo -e "\n\n${YELLOW}SIGINT received. ${SCRIPT_NAME} is shutting down gracefully.${NC}"
    # Future cleanup tasks could go here (e.g., removing temp files).
    exit 130
}

trap cleanup INT TERM

# ==============================================================================
# SECTION: CORE HELPER FUNCTIONS
# ==============================================================================

# --- Centralized Logging Function ---
# Logs messages to both the console and the log file with a timestamp.
log_message() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') | $1" | tee -a "$LOG_FILE"
}

# --- Standardized Banner Function ---
# Prints a consistent, professional banner for major sections.
print_banner() {
    echo -e "\n${BLUE}==============================================================${NC}"
    echo -e "${BLUE}==== ${YELLOW}$1 ${NC}"
    echo -e "${BLUE}==============================================================${NC}"
}

# --- Command Success Verification and Reporting ---
# Checks the exit status of the last command and records the result.
check_command_status() {
    # $1: The name of the package/command being checked.
    if [ $? -eq 0 ]; then
        log_message "${GREEN}SUCCESS:${NC} $1 was installed successfully."
        SUCCESS_LIST+=("$1")
    else
        log_message "${RED}FAILURE:${NC} An error occurred during the installation of $1."
        FAILURE_LIST+=("$1")
    fi
}

# --- Spinner Progress Indicator ---
# Provides visual feedback for long-running operations.
spinner() {
    local pid=$!
    local spinstr='|/-\\'
    while ps -p $pid > /dev/null; do
        local temp=${spinstr#?}
        printf " ${PURPLE}[%c]${NC} Processing..." "$spinstr"
        spinstr=$temp${spinstr%"$temp"}
        sleep 0.1
        printf "\r"
    done
    printf "                  \r" # Clear the line
}

# ==============================================================================
# SECTION: PRE-FLIGHT SYSTEM CHECKS
# ==============================================================================

# --- Run System Verification Before Installation ---
pre_flight_checks() {
    print_banner "Performing System Pre-flight Checks"
    local has_error=0

    # 1. Check Internet Connectivity
    if ping -c 1 8.8.8.8 &>/dev/null; then
        log_message "${GREEN}Internet Connection:${NC} OK"
    else
        log_message "${RED}Internet Connection:${NC} FAILED. Connect to the internet."
        has_error=1
    fi

    # 2. Check Available Storage Space (requires ~1.5GB)
    local required_kb=1572864 # 1.5 GB
    local available_kb
    available_kb=$(df -k . | awk 'NR==2 {print $4}')
    if (( available_kb > required_kb )); then
        log_message "${GREEN}Available Storage:${NC} OK"
    else
        log_message "${RED}Available Storage:${NC} FAILED. Insufficient space."
        has_error=1
    fi

    if [ $has_error -eq 1 ]; then
        log_message "${RED}Pre-flight checks failed. Cannot proceed. Aborting.${NC}"
        exit 1
    fi
}

# ==============================================================================
# SECTION: PACKAGE INSTALLATION MODULES
# ==============================================================================

# --- Core Termux Environment Update ---
update_termux() {
    print_banner "Updating Termux Base System"
    log_message "Updating package lists..."
    (pkg update -y &> "$LOG_FILE") & spinner
    log_message "Upgrading installed packages..."
    (pkg upgrade -y &> "$LOG_FILE") & spinner
    log_message "Base system update complete."
}

# --- PKG Package Installation Module ---
install_pkg_packages() {
    print_banner "Installing PKG Packages"
    
    local PKG_PACKAGES="
        termux-tools util-linux coreutils binutils findutils grep sed gawk tar
        zip unzip less man git build-essential clang cmake python python2
        nodejs-lts openjdk-17 golang ruby perl php openssh curl wget nmap
        net-tools inetutils tcpdump whois dnsutils htop proot tsu tmux zsh
        fish neofetch termux-api nano vim neovim emacs micro python-numpy matplotlib
    "

    for pkg_name in $PKG_PACKAGES; do
        echo -n "Checking for $pkg_name..."
        if dpkg -s "$pkg_name" &>/dev/null; then
            echo -e "${YELLOW} already installed. Skipping.${NC}"
            SKIPPED_LIST+=("$pkg_name")
        else
            echo " installing..."
            (pkg install -y "$pkg_name" &>> "$LOG_FILE") & spinner
            check_command_status "$pkg_name"
        fi
    done
}

# --- NPM Package Installation Module ---
install_npm_packages() {
    print_banner "Installing Global NPM Packages"
    
    if ! command -v npm &> /dev/null; then
        log_message "${RED}NPM command not found. Skipping NPM module.${NC}"
        FAILURE_LIST+=("Node.js/NPM")
        return
    fi
    
    local NPM_PACKAGES="
        yarn nodemon pm2 http-server live-server webpack eslint prettier typescript
    "

    for npm_name in $NPM_PACKAGES; do
        echo -n "Checking for $npm_name..."
        if npm list -g --depth=0 "$npm_name" | grep -q "$npm_name@"; then
            echo -e "${YELLOW} already installed. Skipping.${NC}"
            SKIPPED_LIST+=("$npm_name")
        else
            echo " installing..."
            (npm install -g "$npm_name" &>> "$LOG_FILE") & spinner
            check_command_status "$npm_name"
        fi
    done
}

# --- PIP Package Installation Module ---
install_pip_packages() {
    print_banner "Installing Python (PIP) Packages"

    if ! command -v pip &> /dev/null; then
        log_message "${RED}PIP command not found. Skipping PIP module.${NC}"
        FAILURE_LIST+=("Python/PIP")
        return
    fi

    echo "Upgrading PIP essentials..."
    (pip install --upgrade pip setuptools wheel &>> "$LOG_FILE") & spinner

    local PIP_PACKAGES="
        virtualenv requests beautifulsoup4 lxml scipy pandas scikit-learn
        jupyter flask django fastapi sqlalchemy pylint autopep8 yt-dlp ansible scrapy
    "
    # Note: TensorFlow/PyTorch installation is complex and architecture-specific on Termux,
    # often requiring custom builds. They are omitted here for flawless execution.

    for pip_name in $PIP_PACKAGES; do
        echo -n "Checking for $pip_name..."
        if pip show "$pip_name" &>/dev/null; then
            echo -e "${YELLOW} already installed. Skipping.${NC}"
            SKIPPED_LIST+=("$pip_name")
        else
            echo " installing..."
            (pip install --no-cache-dir "$pip_name" &>> "$LOG_FILE") & spinner
            check_command_status "$pip_name"
        fi
    done
}

# ==============================================================================
# SECTION: REPORTING AND MAIN MENU
# ==============================================================================

# --- Generate a Post-Installation Summary Report ---
print_summary_report() {
    print_banner "Installation Summary Report"
    echo -e "${GREEN}Successful Installations: ${#SUCCESS_LIST[@]}${NC}"
    printf "  - %s\n" "${SUCCESS_LIST[@]}" 2>/dev/null

    echo -e "\n${YELLOW}Skipped (Already Installed): ${#SKIPPED_LIST[@]}${NC}"
    printf "  - %s\n" "${SKIPPED_LIST[@]}" 2>/dev/null

    if [ ${#FAILURE_LIST[@]} -gt 0 ]; then
        echo -e "\n${RED}Failed Installations: ${#FAILURE_LIST[@]}${NC}"
        printf "  - %s\n" "${FAILURE_LIST[@]}" 2>/dev/null
        log_message "${YELLOW}Review '$LOG_FILE' for detailed error information.${NC}"
    fi
    
    log_message "==== End of ${SCRIPT_NAME} execution ===="
}


# --- Interactive Main Menu ---
main_menu() {
    clear
    print_banner "Welcome to ${SCRIPT_NAME} - The Professional Termux Installer"
    echo -e "This tool will intelligently install and configure a suite of essential tools.\n"
    echo -e "${PURPLE}Choose your installation path:${NC}"
    echo "  1. Full Installation (All Packages - Recommended)"
    echo "  2. Install PKG System Packages Only"
    echo "  3. Install NPM Global Packages Only"
    echo "  4. Install PIP Python Packages Only"
    echo "  5. Exit ${SCRIPT_NAME}"
    echo ""

    local choice
    read -p "Enter your choice [1-5]: " choice
    
    case $choice in
        1)
            update_termux; install_pkg_packages; install_npm_packages; install_pip_packages
            ;;
        2)
            update_termux; install_pkg_packages
            ;;
        3)
            install_npm_packages
            ;;
        4)
            install_pip_packages
            ;;
        5)
            echo "Exiting." ; exit 0
            ;;
        *)
            echo -e "\n${RED}Invalid choice. Please select a valid option.${NC}"; sleep 2
            ;;
    esac
    print_summary_report
}

# ==============================================================================
# SECTION: SCRIPT EXECUTION ENTRYPOINT
# ==============================================================================

# Clear log file for the new session
> "$LOG_FILE"
log_message "==== ${SCRIPT_NAME} execution started ===="

# --- Non-Interactive Mode (Argument Parser) ---
if [ $# -gt 0 ]; then
    log_message "Non-interactive mode detected with argument: $1"
    pre_flight_checks
    case "$1" in
        --all)
            update_termux; install_pkg_packages; install_npm_packages; install_pip_packages
            ;;
        --pkg)
            update_termux; install_pkg_packages
            ;;
        --npm)
            install_npm_packages
            ;;
        --pip)
            install_pip_packages
            ;;
        *)
            echo -e "${RED}Invalid argument. Use --all, --pkg, --npm, or --pip.${NC}"
            exit 1
            ;;
    esac
    print_summary_report
    exit 0
fi

# --- Interactive Mode (Main Menu) ---
pre_flight_checks
while true; do
    main_menu
    read -p "Press Enter to return to the main menu or Ctrl+C to exit..."
    SUCCESS_LIST=(); FAILURE_LIST=(); SKIPPED_LIST=() # Reset lists for next run
done
