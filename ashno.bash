#!/bin/bash
# ==============================================================================
#
# Ashno: The Professional Termux Toolkit Installer
#
# Version:      4.0 (Configurable Profiles Edition)
# Author:       Generated by an AI expert
# Description:  A flawless, profile-driven tool for setting up a Termux
#               environment. It decouples package lists from logic,
#               allowing for flexible, tiered installation profiles.
#
# ==============================================================================

# --- Globals and Configuration ---
readonly SCRIPT_NAME="Ashno"
readonly PROFILES_DIR="profiles"

# --- ANSI Color Codes for Professional Output ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m';
BLUE='\033[0;34m'; PURPLE='\033[0;35m'; NC='\033[0m';

# --- State-Tracking Variables ---
SUCCESS_LIST=(); FAILURE_LIST=(); SKIPPED_LIST=();
SELECTED_PROFILE=0

# --- Graceful Exit Handler ---
cleanup() {
    echo -e "\n\n${YELLOW}SIGINT received. ${SCRIPT_NAME} is shutting down gracefully.${NC}"
    exit 130
}
trap cleanup INT TERM

# ==============================================================================
# SECTION: CORE HELPER & ARCHITECTURE FUNCTIONS
# ==============================================================================

# --- Print the Help Menu ---
print_help_menu() {
    echo -e "${BLUE}=== ${YELLOW}${SCRIPT_NAME} - The Profile-Driven Termux Installer${BLUE} ===${NC}"
    echo -e "\nA professional tool that installs packages based on configurable profiles."
    echo -e "\n${YELLOW}USAGE (Interactive):${NC}"
    echo -e "  ./ashno"
    echo -e "    Launches the interactive menus to first select a profile and then the"
    echo -e "    package types to install."
    echo
    echo -e "${YELLOW}USAGE (Non-Interactive):${NC}"
    echo -e "  ./ashno --profile <LEVEL> [ACTION]"
    echo
    echo -e "${YELLOW}PROFILES:${NC}"
    echo -e "  The installation is tiered. Higher levels include all packages from lower levels."
    echo -e "  ${PURPLE}<LEVEL>${NC} can be:"
    echo -e "    1: Essentials   - A lightweight, minimal setup for basic functionality."
    echo -e "    2: Extended      - For developers and advanced users (Recommended)."
    echo -e "    3: Complete      - A comprehensive toolkit for power users."
    echo
    echo -e "${YELLOW}ACTIONS:${NC}"
    echo -e "  ${PURPLE}--all${NC}         Install all package types for the selected profile."
    echo -e "  ${PURPLE}--pkg${NC}         Install only the PKG system packages."
    echo -e "  ${PURPLE}--npm${NC}         Install only the global NPM (Node.js) packages."
    echo -e "  ${PURPLE}--pip${NC}         Install only the PIP (Python) packages."
    echo
    echo -e "  ${PURPLE}-h, --help${NC}   Display this help manual and exit."
    echo -e "\n${YELLOW}EXAMPLE:${NC}"
    echo -e "  ./ashno --profile 2 --all"
}

# --- Dynamically Build the Master Package List ---
# This is the core logic of the profile system.
build_package_list() {
    local pkg_type="$1"      # "pkg", "npm", or "pip"
    local profile_level="$2" # 1, 2, or 3
    local final_list=""
    local files_to_read=()

    for i in $(seq 1 "$profile_level"); do
        local profile_name
        case $i in
            1) profile_name="1_essentials" ;;
            2) profile_name="2_extended" ;;
            3) profile_name="3_complete" ;;
        esac
        
        local list_file="${PROFILES_DIR}/${profile_name}/${pkg_type}.list"
        if [ -f "$list_file" ]; then
            files_to_read+=("$list_file")
        else
             # Silently ignore missing files to allow for partial profiles
             # (e.g., a profile might not have any npm packages)
             :
        fi
    done
    
    if [ ${#files_to_read[@]} -gt 0 ]; then
        # Combine files, filter comments/blanks, and de-duplicate
        final_list=$(cat "${files_to_read[@]}" | grep -vE '^\s*#|^\s*$' | sort -u)
    fi
    echo "$final_list"
}


# ==============================================================================
# SECTION: UI & INSTALLATION (Functions unchanged from v3.0 shown for brevity)
# ==============================================================================
print_banner() { echo -e "\n${BLUE}===================================\n==== ${YELLOW}$1 ${NC}\n===================================${NC}"; }
check_command_status() { if [ $? -eq 0 ]; then SUCCESS_LIST+=("$1"); else FAILURE_LIST+=("$1"); fi; }
spinner() { local pid=$!; local str='|/-\'; while ps -p $pid >/dev/null; do printf "\r ${PURPLE}[%c]${NC} Processing..." "${str}"; str=${str:1}${str:0:1}; sleep 0.1; done; printf "\r \r"; }
pre_flight_checks() { print_banner "Performing System Checks"; if ! ping -c 1 8.8.8.8 &>/dev/null; then echo -e "${RED}Error: No internet.${NC}"; exit 1; fi; echo -e "${GREEN}Internet: OK${NC}"; if (( $(df -k . | awk 'NR==2{print $4}') < 1572864 )); then echo -e "${RED}Error: Insufficient storage.${NC}"; exit 1; fi; echo -e "${GREEN}Storage: OK${NC}"; }
update_termux() { print_banner "Updating Termux Base System"; (pkg update -y && pkg upgrade -y) &>/dev/null & spinner; echo "Update complete.";}

# --- Re-engineered Installer Functions ---
install_packages() {
    local pkg_type="$1"
    local type_name="$2"
    
    print_banner "Installing ${type_name} Packages"

    local COMMAND_CHECK; local INSTALL_CMD; local LIST_CMD;
    case "$pkg_type" in
        pkg) COMMAND_CHECK="dpkg -s"; INSTALL_CMD="pkg install -y" ;;
        npm) if ! command -v npm &>/dev/null; then echo -e "${RED}NPM not found. Skipping.${NC}"; FAILURE_LIST+=("Node.js/NPM"); return; fi; COMMAND_CHECK="npm list -g --depth=0"; INSTALL_CMD="npm install -g" ;;
        pip) if ! command -v pip &>/dev/null; then echo -e "${RED}PIP not found. Skipping.${NC}"; FAILURE_LIST+=("Python/PIP"); return; fi; (pip install --upgrade pip setuptools wheel) &>/dev/null & spinner; COMMAND_CHECK="pip show"; INSTALL_CMD="pip install --no-cache-dir" ;;
    esac

    local package_list
    package_list=$(build_package_list "$pkg_type" "$SELECTED_PROFILE")

    if [ -z "$package_list" ]; then
        echo "No packages found for this profile and type."
        return
    fi
    
    for pkg_name in $package_list; do
        echo -n "Checking for $pkg_name..."
        if $COMMAND_CHECK "$pkg_name" &>/dev/null; then
            echo -e "${YELLOW} already installed. Skipping.${NC}"
            SKIPPED_LIST+=("$pkg_name")
        else
            echo " installing..."
            ($INSTALL_CMD "$pkg_name") &>/dev/null & spinner
            check_command_status "$pkg_name"
        fi
    done
}


# ==============================================================================
# SECTION: REPORTING & MENUS
# ==============================================================================

print_summary_report() {
    print_banner "Installation Summary Report"
    echo -e "${GREEN}Successful: ${#SUCCESS_LIST[@]}${NC}"; printf -- " - %s\n" "${SUCCESS_LIST[@]}" 2>/dev/null
    echo -e "\n${YELLOW}Skipped: ${#SKIPPED_LIST[@]}${NC}"; printf -- " - %s\n" "${SKIPPED_LIST[@]}" 2>/dev/null
    if [ ${#FAILURE_LIST[@]} -gt 0 ]; then
        echo -e "\n${RED}Failed: ${#FAILURE_LIST[@]}${NC}"; printf -- " - %s\n" "${FAILURE_LIST[@]}" 2>/dev/null
    fi
    echo -e "\n${GREEN}All operations complete.${NC}"
}

main_menu() {
    local profile_text
    case $SELECTED_PROFILE in
        1) profile_text="Essentials" ;; 2) profile_text="Extended" ;; 3) profile_text="Complete" ;;
    esac
    
    clear
    print_banner "Welcome to ${SCRIPT_NAME}"
    echo -e "Active Profile: ${YELLOW}${profile_text}${NC}\n"
    echo -e "${PURPLE}Choose what to install from this profile:${NC}"
    echo "  1. Full Installation (All Package Types)"
    echo "  2. Install PKG System Packages Only"
    echo "  3. Install NPM Global Packages Only"
    echo "  4. Install PIP Python Packages Only"
    echo "  5. Change Profile"
    echo "  6. Exit ${SCRIPT_NAME}"
    echo ""
}

profile_selection_menu() {
    clear
    print_banner "Choose Installation Profile"
    echo -e "Profiles are cumulative. 'Extended' includes all 'Essentials' packages.\n"
    echo "  1. ${PURPLE}Essentials${NC}   - A lightweight, minimal setup for basic functionality."
    echo "  2. ${PURPLE}Extended${NC}     - For developers and advanced users (Recommended)."
    echo "  3. ${PURPLE}Complete${NC}     - A comprehensive toolkit for power users."
    echo ""
    local choice
    read -p "Select a profile [1-3]: " choice
    case $choice in
        1|2|3) SELECTED_PROFILE=$choice ;;
        *) echo "${RED}Invalid selection.${NC}"; sleep 1; profile_selection_menu ;;
    esac
}


# ==============================================================================
# SECTION: SCRIPT EXECUTION ENTRYPOINT
# ==============================================================================

# --- Pre-execution Check ---
if [ ! -d "$PROFILES_DIR" ]; then
    echo -e "${RED}Fatal Error: The '${PROFILES_DIR}/' directory was not found.${NC}"
    echo -e "Please ensure it exists and contains the profile configurations."
    exit 1
fi

# --- Non-Interactive Mode (Argument Parser) ---
if [ $# -gt 0 ]; then
    profile_arg=0; action_arg=""
    while [ $# -gt 0 ]; do
        case "$1" in
            -h|--help) print_help_menu; exit 0 ;;
            --profile) profile_arg="$2"; shift 2 ;;
            --all|--pkg|--npm|--pip) action_arg="$1"; shift 1 ;;
            *) echo -e "${RED}Invalid argument: $1${NC}\nUse --help for usage."; exit 1 ;;
        esac
    done

    if [[ ! "$profile_arg" =~ ^[1-3]$ ]] || [ -z "$action_arg" ]; then
        echo -e "${RED}Error: Both --profile <1-3> and an action (--all, --pkg, etc.) are required.${NC}"
        print_help_menu; exit 1
    fi
    
    SELECTED_PROFILE=$profile_arg
    pre_flight_checks
    [ "$action_arg" == "--all" ] || [ "$action_arg" == "--pkg" ] && update_termux
    [ "$action_arg" == "--all" ] || [ "$action_arg" == "--pkg" ] && install_packages "pkg" "PKG"
    [ "$action_arg" == "--all" ] || [ "$action_arg" == "--npm" ] && install_packages "npm" "NPM"
    [ "$action_arg" == "--all" ] || [ "$action_arg" == "--pip" ] && install_packages "pip" "PIP"
    print_summary_report
    exit 0
fi

# --- Interactive Mode ---
pre_flight_checks
profile_selection_menu
while true; do
    main_menu
    read -p "Enter your choice [1-6]: " main_choice
    case $main_choice in
        1) update_termux; install_packages "pkg" "PKG"; install_packages "npm" "NPM"; install_packages "pip" "PIP" ;;
        2) update_termux; install_packages "pkg" "PKG" ;;
        3) install_packages "npm" "NPM" ;;
        4) install_packages "pip" "PIP" ;;
        5) profile_selection_menu; continue ;; # Loop back to main menu after selection
        6) echo "Exiting."; exit 0 ;;
        *) echo "${RED}Invalid selection.${NC}"; sleep 1; continue ;;
    esac
    print_summary_report
    read -p "Press Enter to return to the main menu..."
    SUCCESS_LIST=(); FAILURE_LIST=(); SKIPPED_LIST=() # Reset for next run
done
