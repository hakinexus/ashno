#!/bin/bash
# ==============================================================================
#
# Ashno: The Professional Termux Toolkit Installer
#
# Version:      6.0 (Aesthetic Perfection)
# Author:       Generated by an AI expert
# Description:  The definitive, flawless, and profile-driven tool for
#               setting up a Termux environment. Features a polished,
#               professional UI with real-time feedback for every operation.
#
# ==============================================================================

# --- Globals and Configuration ---
readonly SCRIPT_NAME="Ashno"
readonly PROFILES_DIR="profiles"

# --- ANSI Color Codes for a Professional Palette ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m';
BLUE='\033[0;34m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m';
NC='\033[0m'; BOLD='\033[1m';

# --- State-Tracking Variables ---
SUCCESS_LIST=(); FAILURE_LIST=(); SKIPPED_LIST=();
SELECTED_PROFILE=0

# --- Graceful Exit Handler ---
cleanup() {
    echo -e "\n\n${YELLOW}SIGINT received. Shutting down gracefully.${NC}"
    tput cnorm # Ensure cursor is visible on exit
    exit 130
}
trap cleanup INT TERM

# ==============================================================================
# SECTION: UI & CORE HELPER FUNCTIONS (Aesthetic Overhaul)
# ==============================================================================

# --- NEW: A visually appealing, professional banner ---
print_banner() {
    local title=" $1 "
    local len=${#title}
    local border_len=$((len + 2))
    local border_top; border_top=$(printf "╭%*s" "$border_len" | tr ' ' '─');
    local border_bottom; border_bottom=$(printf "╰%*s" "$border_len" | tr ' ' '─');
    echo -e "\n${BLUE}${border_top}╮${NC}"
    echo -e "${BLUE}│ ${BOLD}${YELLOW}${title} ${BLUE}│${NC}"
    echo -e "${BLUE}${border_bottom}╯${NC}"
}

# --- NEW: A standardized prompt for user input ---
print_prompt() {
    echo -e "\n${PURPLE}└──>${NC}${BOLD} Select an option:${NC} \c"
}

# --- Print the Help Menu ---
print_help_menu() {
    clear; print_banner "Ashno Help Manual"
    echo -e "A professional tool that installs packages based on configurable profiles."
    echo
    echo -e "${BOLD}${YELLOW}USAGE:${NC}"
    echo -e "  ./ashno ${PURPLE}[COMMAND]${NC}"
    echo -e "    Running without a command launches the interactive menu."
    echo
    echo -e "${BOLD}${YELLOW}NON-INTERACTIVE COMMANDS:${NC}"
    printf "  ${PURPLE}%-20s${NC} %s\n" "--profile <LEVEL>" "Select profile tier (1, 2, or 3). Must be used with an action."
    printf "  ${PURPLE}%-20s${NC} %s\n" "--all" "ACTION: Install all package types for the profile."
    printf "  ${PURPLE}%-20s${NC} %s\n" "--pkg" "ACTION: Install only PKG packages for the profile."
    printf "  ${PURPLE}%-20s${NC} %s\n" "--npm" "ACTION: Install only NPM packages for the profile."
    printf "  ${PURPLE}%-20s${NC} %s\n" "--pip" "ACTION: Install only PIP packages for the profile."
    printf "  ${PURPLE}%-20s${NC} %s\n" "-h, --help" "Display this help manual and exit."
    echo
    echo -e "${BOLD}${YELLOW}EXAMPLE:${NC}"
    echo -e "  ./ashno --profile 2 --all"
    echo
}

# --- Dynamically Build the Master Package List ---
build_package_list() {
    local pkg_type="$1"; local profile_level="$2"; local final_list=""; local files_to_read=();
    for i in $(seq 1 "$profile_level"); do
        local profile_name; case $i in 1) profile_name="1_essentials";; 2) profile_name="2_extended";; 3) profile_name="3_complete";; esac
        local list_file="${PROFILES_DIR}/${profile_name}/${pkg_type}.list"; if [ -f "$list_file" ]; then files_to_read+=("$list_file"); fi
    done
    if [ ${#files_to_read[@]} -gt 0 ]; then final_list=$(cat "${files_to_read[@]}" | grep -vE '^\s*#|^\s*$' | sort -u); fi
    echo "$final_list"
}

# ==============================================================================
# SECTION: INSTALLATION ENGINE (With Real-Time Feedback)
# ==============================================================================
spinner() { tput civis; local pid=$1; local str='|/-\'; while ps -p "$pid" >/dev/null; do printf " ${PURPLE}[%c]${NC}" "${str}"; str=${str:1}${str:0:1}; sleep 0.1; printf "\r"; done; }
pre_flight_checks() { print_banner "Performing System Checks"; if ! ping -c 1 8.8.8.8 &>/dev/null; then echo -e "${RED}Error: No internet.${NC}"; exit 1; fi; echo -e " ${GREEN}✔${NC} Internet Connection: OK"; if (( $(df -k . | awk 'NR==2{print $4}') < 1572864 )); then echo -e "${RED}Error: Insufficient storage.${NC}"; exit 1; fi; echo -e " ${GREEN}✔${NC} Available Storage:   OK"; }
update_termux() { print_banner "Updating Termux Base System"; (pkg update -y && pkg upgrade -y) &>/dev/null & spinner $!; wait $!; echo -e " ${GREEN}✔${NC} Base system update complete.";}

# --- THE DEFINITIVE UPGRADE: Installer with real-time status ---
install_packages() {
    local pkg_type="$1"; local type_name="$2"; print_banner "Installing ${type_name} Packages"
    local COMMAND_CHECK; local INSTALL_CMD;
    case "$pkg_type" in
        pkg) COMMAND_CHECK="dpkg -s"; INSTALL_CMD="pkg install -y" ;;
        npm) if ! command -v npm &>/dev/null; then echo -e "${YELLOW}Notification:${NC} NPM command not found. Skipping."; FAILURE_LIST+=("Node.js/NPM"); return; fi; COMMAND_CHECK="npm list -g --depth=0"; INSTALL_CMD="npm install -g" ;;
        pip) if ! command -v pip &>/dev/null; then echo -e "${YELLOW}Notification:${NC} PIP command not found. Skipping."; FAILURE_LIST+=("Python/PIP"); return; fi; (pip install --upgrade pip setuptools wheel) &>/dev/null & spinner $!; wait $!; COMMAND_CHECK="pip show"; INSTALL_CMD="pip install --no-cache-dir" ;;
    esac
    local package_list; package_list=$(build_package_list "$pkg_type" "$SELECTED_PROFILE")
    if [ -z "$package_list" ]; then echo "No packages found in this profile for type: ${type_name}."; return; fi
    
    for pkg_name in $package_list; do
        echo -en "  Checking for ${BOLD}${pkg_name}${NC}..."
        if $COMMAND_CHECK "$pkg_name" &>/dev/null; then
            printf "\r\033[K"; echo -e "  ${YELLOW}●${NC} Skipping ${BOLD}${pkg_name}${NC} (already installed)"
            SKIPPED_LIST+=("$pkg_name")
        else
            printf "\r\033[K"; echo -en "  ${CYAN}ᐳ${NC} Installing ${BOLD}${pkg_name}${NC}..."
            ($INSTALL_CMD "$pkg_name") &>/dev/null & local pid=$!; spinner $pid; wait $pid; local exit_code=$?
            
            if [ "$exit_code" -eq 0 ]; then
                printf "\r\033[K"; echo -e "  ${GREEN}✔${NC} Successfully installed ${BOLD}${pkg_name}${NC}"
                SUCCESS_LIST+=("$pkg_name")
            else
                printf "\r\033[K"; echo -e "  ${RED}✖${NC} Failed to install ${BOLD}${pkg_name}${NC}"
                FAILURE_LIST+=("$pkg_name")
            fi
        fi
    done
}

# ==============================================================================
# SECTION: MENUS & REPORTING (Final Polished Version)
# ==============================================================================

print_summary_report() {
    print_banner "Installation Summary Report"
    echo -e " ${GREEN}✔ Successful: ${#SUCCESS_LIST[@]}${NC}"; if [ ${#SUCCESS_LIST[@]} -gt 0 ]; then printf -- "   - %s\n" "${SUCCESS_LIST[@]}"; fi
    echo -e "\n ${YELLOW}● Skipped: ${#SKIPPED_LIST[@]}${NC}"; if [ ${#SKIPPED_LIST[@]} -gt 0 ]; then printf -- "   - %s\n" "${SKIPPED_LIST[@]}"; fi
    if [ ${#FAILURE_LIST[@]} -gt 0 ]; then echo -e "\n ${RED}✖ Failed: ${#FAILURE_LIST[@]}${NC}"; printf -- "   - %s\n" "${FAILURE_LIST[@]}"; fi
    echo -e "\n${GREEN}${BOLD}All operations complete.${NC}"
}

main_menu() {
    local profile_text; case $SELECTED_PROFILE in 1) profile_text="Essentials";; 2) profile_text="Extended";; 3) profile_text="Complete";; esac
    clear; print_banner "Main Menu"
    echo -e "  ${BOLD}Active Profile:${NC} ${YELLOW}${profile_text}${NC}"
    echo
    echo -e "  ${BOLD}${YELLOW}1)${NC}  ${BOLD}Full Installation${NC} (PKG, NPM, PIP)"
    echo -e "  ${BOLD}${YELLOW}2)${NC}  Install ${BOLD}PKG${NC} System Packages"
    echo -e "  ${BOLD}${YELLOW}3)${NC}  Install ${BOLD}NPM${NC} Global Packages"
    echo -e "  ${BOLD}${YELLOW}4)${NC}  Install ${BOLD}PIP${NC} Python Packages"
    echo
    echo -e "  ${BOLD}${YELLOW}5)${NC}  Change Installation Profile"
    echo -e "  ${BOLD}${YELLOW}6)${NC}  Exit Ashno"
}

profile_selection_menu() {
    clear; print_banner "Choose Installation Profile"
    echo -e "Welcome to Ashno. Please select a profile to begin."
    echo -e "Profiles are cumulative (higher tiers include all lower tiers).\n"
    
    echo -e "  ${BOLD}${YELLOW}1) Essentials${NC}"
    echo -e "     A lightweight, minimal setup for basic functionality."
    echo
    echo -e "  ${BOLD}${YELLOW}2) Extended${NC} ${GREEN}(Recommended)${NC}"
    echo -e "     For developers and advanced users."
    echo
    echo -e "  ${BOLD}${YELLOW}3) Complete${NC}"
    echo -e "     A comprehensive toolkit for power users."
    echo
    echo -e "  ${BOLD}${YELLOW}4) Exit Ashno${NC}"
    
    local choice; print_prompt; read choice
    case $choice in
        1|2|3) SELECTED_PROFILE=$choice ;;
        4) echo -e "\nExiting Ashno."; exit 0;;
        *) echo -e "\n${RED}Invalid selection.${NC}"; sleep 1; profile_selection_menu ;;
    esac
}

# ==============================================================================
# SECTION: SCRIPT EXECUTION ENTRYPOINT
# ==============================================================================

if [ ! -d "$PROFILES_DIR" ]; then echo -e "${RED}Fatal Error: The '${PROFILES_DIR}/' directory was not found.${NC}"; exit 1; fi

if [ $# -gt 0 ]; then
    profile_arg=0; action_arg=""
    while [ $# -gt 0 ]; do case "$1" in -h|--help) print_help_menu; exit 0;; --profile) profile_arg="$2"; shift 2;; --all|--pkg|--npm|--pip) action_arg="$1"; shift 1;; *) echo -e "${RED}Invalid argument: $1${NC}\nUse --help."; exit 1;; esac; done
    if [[ ! "$profile_arg" =~ ^[1-3]$ ]] || [ -z "$action_arg" ]; then echo -e "${RED}Error: --profile <1-3> and an action are required.${NC}"; print_help_menu; exit 1; fi
    SELECTED_PROFILE=$profile_arg; pre_flight_checks
    [ "$action_arg" == "--all" ] || [ "$action_arg" == "--pkg" ] && update_termux
    [ "$action_arg" == "--all" ] || [ "$action_arg" == "--pkg" ] && install_packages "pkg" "PKG"
    [ "$action_arg" == "--all" ] || [ "$action_arg" == "--npm" ] && install_packages "npm" "NPM"
    [ "$action_arg" == "--all" ] || [ "$action_arg" == "--pip" ] && install_packages "pip" "PIP"
    print_summary_report; exit 0
fi

clear; pre_flight_checks; profile_selection_menu
while true; do
    main_menu
    print_prompt; read main_choice
    case $main_choice in
        1) update_termux; install_packages "pkg" "PKG"; install_packages "npm" "NPM"; install_packages "pip" "PIP";;
        2) update_termux; install_packages "pkg" "PKG";;
        3) install_packages "npm" "NPM";;
        4) install_packages "pip" "PIP";;
        5) profile_selection_menu; continue;;
        6) echo -e "\nExiting Ashno."; exit 0;;
        *) echo -e "\n${RED}Invalid choice.${NC}"; sleep 1; continue;;
    esac
    print_summary_report; echo; read -n 1 -s -r -p "Press any key to return to the main menu..."
    SUCCESS_LIST=(); FAILURE_LIST=(); SKIPPED_LIST=();
done
