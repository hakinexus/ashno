#!/bin/bash
# ==============================================================================
#
# Ashno: The Professional Termux Toolkit Installer
#
# Version:      3.0 (Professional Edition)
# Author:       Generated by an AI expert
# Description:  A flawless, self-documenting, and user-centric script for
#               setting up a professional development environment in Termux.
#               It operates silently, with a clean UI, and no external logs.
#
# ==============================================================================

# --- Globals and Configuration ---
readonly SCRIPT_NAME="Ashno"

# --- ANSI Color Codes for Professional Output ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# --- State-Tracking Arrays ---
SUCCESS_LIST=()
FAILURE_LIST=()
SKIPPED_LIST=()

# --- Graceful Exit Handler ---
cleanup() {
    echo -e "\n\n${YELLOW}SIGINT received. ${SCRIPT_NAME} is shutting down gracefully.${NC}"
    exit 130
}

trap cleanup INT TERM

# ==============================================================================
# SECTION: CORE HELPER FUNCTIONS
# ==============================================================================

# --- Print the Help Menu ---
print_help_menu() {
    clear
    echo -e "${BLUE}=== ${YELLOW}${SCRIPT_NAME} - The Professional Termux Installer${BLUE} ===${NC}"
    echo -e "\nA robust, intelligent, and user-centric script for setting up a"
    echo -e "professional development environment in Termux."
    echo
    echo -e "${YELLOW}USAGE:${NC}"
    echo -e "  ./ashno [COMMAND]"
    echo
    echo -e "${YELLOW}DESCRIPTION:${NC}"
    echo -e "  Running './ashno' with no command will launch the interactive menu,"
    echo -e "  allowing you to choose which package categories to install."
    echo
    echo -e "  For automation or quick setup, you can use one of the non-interactive"
    echo -e "  commands listed below. The script performs system pre-flight checks,"
    echo -e "  skips packages that are already installed, and provides a final"
    echo -e "  summary report upon completion."
    echo
    echo -e "${YELLOW}COMMANDS & OPTIONS:${NC}"
    echo -e "  ${PURPLE}--all${NC}         Run a full, non-interactive installation of all package"
    echo -e "                 types (PKG, NPM, PIP)."
    echo
    echo -e "  ${PURPLE}--pkg${NC}         Install only the PKG system packages."
    echo
    echo -e "  ${PURPLE}--npm${NC}         Install only the global NPM (Node.js) packages."
    echo
    echo -e "  ${PURPLE}--pip${NC}         Install only the PIP (Python) packages."
    echo
    echo -e "  ${PURPLE}-h, --help${NC}   Display this help manual and exit."
    echo
}

# --- Standardized Banner Function ---
print_banner() {
    echo -e "\n${BLUE}==============================================================${NC}"
    echo -e "${BLUE}==== ${YELLOW}$1 ${NC}"
    echo -e "${BLUE}==============================================================${NC}"
}

# --- Command Success Verification and Reporting ---
check_command_status() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}SUCCESS:${NC} $1 was installed successfully."
        SUCCESS_LIST+=("$1")
    else
        echo -e "${RED}FAILURE:${NC} An error occurred during the installation of $1."
        FAILURE_LIST+=("$1")
    fi
}

# --- Spinner Progress Indicator ---
spinner() {
    local pid=$!
    local spinstr='|/-\\'
    while ps -p $pid > /dev/null; do
        local temp=${spinstr#?}
        printf " ${PURPLE}[%c]${NC} Processing..." "$spinstr"
        spinstr=$temp${spinstr%"$temp"}
        sleep 0.1
        printf "\r"
    done
    printf "                  \r" # Clear the line
}

# ==============================================================================
# SECTION: PRE-FLIGHT SYSTEM CHECKS
# ==============================================================================
pre_flight_checks() {
    print_banner "Performing System Pre-flight Checks"
    local has_error=0
    if ping -c 1 8.8.8.8 &>/dev/null; then
        echo -e "${GREEN}Internet Connection:${NC} OK"
    else
        echo -e "${RED}Internet Connection:${NC} FAILED. Connect to the internet."
        has_error=1
    fi

    local required_kb=1572864 # 1.5 GB
    local available_kb
    available_kb=$(df -k . | awk 'NR==2 {print $4}')
    if (( available_kb > required_kb )); then
        echo -e "${GREEN}Available Storage:${NC} OK"
    else
        echo -e "${RED}Available Storage:${NC} FAILED. Insufficient space."
        has_error=1
    fi

    if [ $has_error -eq 1 ]; then
        echo -e "${RED}\nPre-flight checks failed. Cannot proceed. Aborting.${NC}"
        exit 1
    fi
}

# ==============================================================================
# SECTION: PACKAGE INSTALLATION MODULES
# ==============================================================================

update_termux() {
    print_banner "Updating Termux Base System"
    echo "Updating and upgrading packages. This may take a moment..."
    (pkg update -y && pkg upgrade -y) &>/dev/null & spinner
    echo "Base system update complete."
}

install_pkg_packages() {
    print_banner "Installing PKG Packages"
    local PKG_PACKAGES="
        termux-tools util-linux coreutils binutils findutils grep sed gawk tar
        zip unzip less man git build-essential clang cmake python python2
        nodejs-lts openjdk-17 golang ruby perl php openssh curl wget nmap
        net-tools inetutils tcpdump whois dnsutils htop proot tsu tmux zsh
        fish neofetch termux-api nano vim neovim emacs micro python-numpy matplotlib
    "
    for pkg_name in $PKG_PACKAGES; do
        echo -n "Checking for $pkg_name..."
        if dpkg -s "$pkg_name" &>/dev/null; then
            echo -e "${YELLOW} already installed. Skipping.${NC}"
            SKIPPED_LIST+=("$pkg_name")
        else
            echo " installing..."
            (pkg install -y "$pkg_name") &>/dev/null & spinner
            check_command_status "$pkg_name"
        fi
    done
}

install_npm_packages() {
    print_banner "Installing Global NPM Packages"
    if ! command -v npm &> /dev/null; then
        echo -e "${RED}NPM command not found. Skipping NPM module.${NC}"
        FAILURE_LIST+=("Node.js/NPM")
        return
    fi
    local NPM_PACKAGES="yarn nodemon pm2 http-server live-server webpack eslint prettier typescript"
    for npm_name in $NPM_PACKAGES; do
        echo -n "Checking for $npm_name..."
        if npm list -g --depth=0 "$npm_name" | grep -q "$npm_name@"; then
            echo -e "${YELLOW} already installed. Skipping.${NC}"
            SKIPPED_LIST+=("$npm_name")
        else
            echo " installing..."
            (npm install -g "$npm_name") &>/dev/null & spinner
            check_command_status "$npm_name"
        fi
    done
}

install_pip_packages() {
    print_banner "Installing Python (PIP) Packages"
    if ! command -v pip &> /dev/null; then
        echo -e "${RED}PIP command not found. Skipping PIP module.${NC}"
        FAILURE_LIST+=("Python/PIP")
        return
    fi
    echo "Upgrading PIP essentials..."
    (pip install --upgrade pip setuptools wheel) &>/dev/null & spinner
    local PIP_PACKAGES="
        virtualenv requests beautifulsoup4 lxml scipy pandas scikit-learn
        jupyter flask django fastapi sqlalchemy pylint autopep8 yt-dlp ansible scrapy
    "
    for pip_name in $PIP_PACKAGES; do
        echo -n "Checking for $pip_name..."
        if pip show "$pip_name" &>/dev/null; then
            echo -e "${YELLOW} already installed. Skipping.${NC}"
            SKIPPED_LIST+=("$pip_name")
        else
            echo " installing..."
            (pip install --no-cache-dir "$pip_name") &>/dev/null & spinner
            check_command_status "$pip_name"
        fi
    done
}

# ==============================================================================
# SECTION: REPORTING AND MAIN MENU
# ==============================================================================

print_summary_report() {
    print_banner "Installation Summary Report"
    echo -e "${GREEN}Successful Installations: ${#SUCCESS_LIST[@]}${NC}"
    printf "  - %s\n" "${SUCCESS_LIST[@]}" 2>/dev/null

    echo -e "\n${YELLOW}Skipped (Already Installed): ${#SKIPPED_LIST[@]}${NC}"
    printf "  - %s\n" "${SKIPPED_LIST[@]}" 2>/dev/null

    if [ ${#FAILURE_LIST[@]} -gt 0 ]; then
        echo -e "\n${RED}Failed Installations: ${#FAILURE_LIST[@]}${NC}"
        printf "  - %s\n" "${FAILURE_LIST[@]}" 2>/dev/null
        echo -e "\n${YELLOW}Some packages failed to install. Please review the errors above.${NC}"
    fi
    echo -e "\n${GREEN}All operations complete.${NC}"
}

main_menu() {
    clear
    print_banner "Welcome to ${SCRIPT_NAME} - The Professional Termux Installer"
    echo -e "This tool will intelligently install and configure a suite of essential tools.\n"
    echo -e "${PURPLE}Choose your installation path:${NC}"
    echo "  1. Full Installation (All Packages - Recommended)"
    echo "  2. Install PKG System Packages Only"
    echo "  3. Install NPM Global Packages Only"
    echo "  4. Install PIP Python Packages Only"
    echo "  5. Exit ${SCRIPT_NAME}"
    echo ""

    local choice
    read -p "Enter your choice [1-5]: " choice
    
    case $choice in
        1) update_termux; install_pkg_packages; install_npm_packages; install_pip_packages ;;
        2) update_termux; install_pkg_packages ;;
        3) install_npm_packages ;;
        4) install_pip_packages ;;
        5) echo "Exiting."; exit 0 ;;
        *) echo -e "\n${RED}Invalid choice. Please select a valid option.${NC}"; sleep 2 ;;
    esac
    print_summary_report
}

# ==============================================================================
# SECTION: SCRIPT EXECUTION ENTRYPOINT
# ==============================================================================

# --- Argument Parser for Help and Non-Interactive Mode ---
if [ $# -gt 0 ]; then
    case "$1" in
        -h|--help)
            print_help_menu
            exit 0
            ;;
        --all|--pkg|--npm|--pip)
            pre_flight_checks
            [ "$1" == "--all" ] || [ "$1" == "--pkg" ] && update_termux
            [ "$1" == "--all" ] || [ "$1" == "--pkg" ] && install_pkg_packages
            [ "$1" == "--all" ] || [ "$1" == "--npm" ] && install_npm_packages
            [ "$1" == "--all" ] || [ "$1" == "--pip" ] && install_pip_packages
            print_summary_report
            exit 0
            ;;
        *)
            echo -e "${RED}Error: Invalid argument '$1'.${NC}" >&2
            echo -e "Use './ashno --help' to see available commands." >&2
            exit 1
            ;;
    esac
fi

# --- Default to Interactive Mode if no arguments are given ---
pre_flight_checks
while true; do
    main_menu
    read -p "Press Enter to return to the main menu or Ctrl+C to exit..."
    SUCCESS_LIST=(); FAILURE_LIST=(); SKIPPED_LIST=() # Reset lists for next run
done
